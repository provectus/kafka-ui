// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`List when it does not have readonly flag matches the snapshot 1`] = `
<StaticRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
    staticContext={Object {}}
  >
    <List
      areTopicsFetching={false}
      clearTopicMessages={[MockFunction]}
      clearTopicsMessages={[MockFunction]}
      deleteTopic={[MockFunction]}
      deleteTopics={[MockFunction]}
      fetchTopicsList={
        [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "clusterName": undefined,
                "orderBy": undefined,
                "page": undefined,
                "perPage": undefined,
                "search": "",
                "showInternal": true,
              },
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      orderBy={null}
      search=""
      setTopicsOrderBy={[MockFunction]}
      setTopicsSearch={[MockFunction]}
      topics={Array []}
      totalPages={1}
    >
      <div
        className="section"
      >
        <div
          className="box"
        >
          <div
            className="columns"
          >
            <div
              className="column is-one-quarter is-align-items-center is-flex"
            >
              <div
                className="field"
              >
                <input
                  checked={true}
                  className="switch is-rounded"
                  id="switchRoundedDefault"
                  name="switchRoundedDefault"
                  onChange={[Function]}
                  type="checkbox"
                />
                <label
                  htmlFor="switchRoundedDefault"
                >
                  Show Internal Topics
                </label>
              </div>
            </div>
            <div
              className="column"
            >
              <Search
                handleSearch={[MockFunction]}
                placeholder="Search by Topic Name"
                value=""
              >
                <Styled(Input)
                  defaultValue=""
                  leftIcon="fas fa-search"
                  onChange={[Function]}
                  placeholder="Search by Topic Name"
                  type="text"
                >
                  <Input
                    className="sc-dlfnuX gxtwfA"
                    defaultValue=""
                    leftIcon="fas fa-search"
                    onChange={[Function]}
                    placeholder="Search by Topic Name"
                    type="text"
                  >
                    <div
                      className="sc-dlfnuX gxtwfA"
                    >
                      <styled.i
                        className="fas fa-search"
                        inputSize="L"
                        position="left"
                      >
                        <i
                          className="sc-bdfBQB eaUARU fas fa-search"
                        />
                      </styled.i>
                      <styled.input
                        className="sc-dlfnuX gxtwfA"
                        defaultValue=""
                        hasLeftIcon={true}
                        inputSize="L"
                        onChange={[Function]}
                        placeholder="Search by Topic Name"
                        type="text"
                      >
                        <input
                          className="sc-gsTEea eQzZSW sc-dlfnuX gxtwfA"
                          defaultValue=""
                          onChange={[Function]}
                          placeholder="Search by Topic Name"
                          type="text"
                        />
                      </styled.input>
                    </div>
                  </Input>
                </Styled(Input)>
              </Search>
            </div>
            <div
              className="column is-2 is-justify-content-flex-end is-flex"
            >
              <Link
                className="button is-primary"
                to="/ui/clusters/undefined/topics/create-new"
              >
                <LinkAnchor
                  className="button is-primary"
                  href="/ui/clusters/undefined/topics/create-new"
                  navigate={[Function]}
                >
                  <a
                    className="button is-primary"
                    href="/ui/clusters/undefined/topics/create-new"
                    onClick={[Function]}
                  >
                    Add a Topic
                  </a>
                </LinkAnchor>
              </Link>
            </div>
          </div>
        </div>
        <div
          className="box"
        >
          <table
            className="table is-fullwidth"
          >
            <thead>
              <tr>
                <th>
                   
                </th>
                <ListHeaderCell
                  orderBy={null}
                  setOrderBy={[MockFunction]}
                  title="Topic Name"
                  value="NAME"
                >
                  <th
                    className="is-clickable"
                    onClick={[Function]}
                  >
                    Topic Name
                    <span
                      className="icon is-small"
                    >
                      <i
                        className="fas fa-sort"
                      />
                    </span>
                  </th>
                </ListHeaderCell>
                <ListHeaderCell
                  orderBy={null}
                  setOrderBy={[MockFunction]}
                  title="Total Partitions"
                  value="TOTAL_PARTITIONS"
                >
                  <th
                    className="is-clickable"
                    onClick={[Function]}
                  >
                    Total Partitions
                    <span
                      className="icon is-small"
                    >
                      <i
                        className="fas fa-sort"
                      />
                    </span>
                  </th>
                </ListHeaderCell>
                <ListHeaderCell
                  orderBy={null}
                  setOrderBy={[MockFunction]}
                  title="Out of sync replicas"
                  value="OUT_OF_SYNC_REPLICAS"
                >
                  <th
                    className="is-clickable"
                    onClick={[Function]}
                  >
                    Out of sync replicas
                    <span
                      className="icon is-small"
                    >
                      <i
                        className="fas fa-sort"
                      />
                    </span>
                  </th>
                </ListHeaderCell>
                <th>
                  Replication Factor
                </th>
                <th>
                  Number of messages
                </th>
                <th>
                  Size
                </th>
                <th>
                  Type
                </th>
                <th>
                  Clean Up Policy
                </th>
                <th>
                   
                </th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td
                  colSpan={10}
                >
                  No topics found
                </td>
              </tr>
            </tbody>
          </table>
          <Pagination
            totalPages={1}
          >
            <nav
              aria-label="pagination"
              className="pagination is-small is-right"
              role="navigation"
            >
              <button
                className="pagination-previous"
                disabled={true}
                type="button"
              >
                Previous
              </button>
              <button
                className="pagination-next"
                disabled={true}
                type="button"
              >
                Next page
              </button>
            </nav>
          </Pagination>
        </div>
      </div>
    </List>
  </Router>
</StaticRouter>
`;
