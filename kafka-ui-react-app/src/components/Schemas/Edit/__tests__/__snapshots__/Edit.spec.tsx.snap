// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Edit Component when schemas are fetched matches the snapshot 1`] = `
<Component
  clearErrors={[Function]}
  control={
    Object {
      "controllerSubjectRef": Object {
        "current": Re {
          "observers": Array [],
        },
      },
      "defaultValuesRef": Object {
        "current": Object {},
      },
      "fieldArrayDefaultValuesRef": Object {
        "current": Object {},
      },
      "fieldArrayNamesRef": Object {
        "current": Set {},
      },
      "fieldArraySubjectRef": Object {
        "current": Re {
          "observers": Array [],
        },
      },
      "fieldsRef": Object {
        "current": Object {},
      },
      "fieldsWithValidationRef": Object {
        "current": Object {},
      },
      "formStateRef": Object {
        "current": Object {
          "dirtyFields": Object {},
          "errors": Object {},
          "isDirty": false,
          "isSubmitSuccessful": false,
          "isSubmitted": false,
          "isSubmitting": false,
          "isValid": true,
          "isValidating": false,
          "submitCount": 0,
          "touchedFields": Object {},
        },
      },
      "formStateSubjectRef": Object {
        "current": Re {
          "observers": Array [],
        },
      },
      "getIsDirty": [Function],
      "inFieldArrayActionRef": Object {
        "current": false,
      },
      "isWatchAllRef": Object {
        "current": false,
      },
      "readFormStateRef": Object {
        "current": Object {
          "dirtyFields": false,
          "errors": false,
          "isDirty": "all",
          "isSubmitting": "all",
          "isValid": false,
          "isValidating": false,
          "touchedFields": false,
        },
      },
      "register": [Function],
      "shouldUnmount": undefined,
      "unregister": [Function],
      "validFieldsRef": Object {
        "current": Object {},
      },
      "watchFieldsRef": Object {
        "current": Set {},
      },
      "watchInternal": [Function],
      "watchSubjectRef": Object {
        "current": Re {
          "observers": Array [],
        },
      },
    }
  }
  formState={
    Object {
      "dirtyFields": Object {},
      "errors": Object {},
      "isDirty": false,
      "isSubmitSuccessful": false,
      "isSubmitted": false,
      "isSubmitting": false,
      "isValid": true,
      "isValidating": false,
      "submitCount": 0,
      "touchedFields": Object {},
    }
  }
  getValues={[Function]}
  handleSubmit={[Function]}
  register={[Function]}
  reset={[Function]}
  setError={[Function]}
  setFocus={[Function]}
  setValue={[Function]}
  trigger={[Function]}
  unregister={[Function]}
  watch={[Function]}
>
  <Styled(PageHeading)
    text="Edit schema"
  />
  <styled.div>
    <form
      onSubmit={[Function]}
    >
      <div>
        <div>
          <styled.label>
            Type
          </styled.label>
          <Styled(Select)
            defaultValue="AVRO"
            disabled={false}
            name="schemaType"
            required={true}
          >
            <option
              key="AVRO"
              value="AVRO"
            >
              AVRO
            </option>
            <option
              key="JSON"
              value="JSON"
            >
              JSON
            </option>
            <option
              key="PROTOBUF"
              value="PROTOBUF"
            >
              PROTOBUF
            </option>
          </Styled(Select)>
        </div>
        <div>
          <styled.label>
            Compatibility level
          </styled.label>
          <Styled(Select)
            defaultValue="BACKWARD"
            disabled={false}
            name="compatibilityLevel"
          >
            <option
              key="BACKWARD"
              value="BACKWARD"
            >
              BACKWARD
            </option>
            <option
              key="BACKWARD_TRANSITIVE"
              value="BACKWARD_TRANSITIVE"
            >
              BACKWARD_TRANSITIVE
            </option>
            <option
              key="FORWARD"
              value="FORWARD"
            >
              FORWARD
            </option>
            <option
              key="FORWARD_TRANSITIVE"
              value="FORWARD_TRANSITIVE"
            >
              FORWARD_TRANSITIVE
            </option>
            <option
              key="FULL"
              value="FULL"
            >
              FULL
            </option>
            <option
              key="FULL_TRANSITIVE"
              value="FULL_TRANSITIVE"
            >
              FULL_TRANSITIVE
            </option>
            <option
              key="NONE"
              value="NONE"
            >
              NONE
            </option>
          </Styled(Select)>
        </div>
      </div>
      <div
        className="editors-wrapper"
      >
        <div
          className="editor-wrapper"
        >
          <h4>
            Latest schema
          </h4>
          <JSONEditor
            height="372px"
            highlightActiveLine={false}
            isFixedHeight={true}
            name="latestSchema"
            readOnly={true}
            value="{
	\\"schema\\": \\"schema\\"
}"
          />
        </div>
        <div
          className="editor-wrapper"
        >
          <h4>
            New schema
          </h4>
          <Controller
            control={
              Object {
                "controllerSubjectRef": Object {
                  "current": Re {
                    "observers": Array [],
                  },
                },
                "defaultValuesRef": Object {
                  "current": Object {},
                },
                "fieldArrayDefaultValuesRef": Object {
                  "current": Object {},
                },
                "fieldArrayNamesRef": Object {
                  "current": Set {},
                },
                "fieldArraySubjectRef": Object {
                  "current": Re {
                    "observers": Array [],
                  },
                },
                "fieldsRef": Object {
                  "current": Object {},
                },
                "fieldsWithValidationRef": Object {
                  "current": Object {},
                },
                "formStateRef": Object {
                  "current": Object {
                    "dirtyFields": Object {},
                    "errors": Object {},
                    "isDirty": false,
                    "isSubmitSuccessful": false,
                    "isSubmitted": false,
                    "isSubmitting": false,
                    "isValid": true,
                    "isValidating": false,
                    "submitCount": 0,
                    "touchedFields": Object {},
                  },
                },
                "formStateSubjectRef": Object {
                  "current": Re {
                    "observers": Array [],
                  },
                },
                "getIsDirty": [Function],
                "inFieldArrayActionRef": Object {
                  "current": false,
                },
                "isWatchAllRef": Object {
                  "current": false,
                },
                "readFormStateRef": Object {
                  "current": Object {
                    "constructor": "all",
                    "dirtyFields": "all",
                    "errors": "all",
                    "isDirty": "all",
                    "isSubmitSuccessful": "all",
                    "isSubmitted": "all",
                    "isSubmitting": "all",
                    "isValid": "all",
                    "isValidating": "all",
                    "submitCount": "all",
                    "touchedFields": "all",
                  },
                },
                "register": [Function],
                "shouldUnmount": undefined,
                "unregister": [Function],
                "validFieldsRef": Object {
                  "current": Object {},
                },
                "watchFieldsRef": Object {
                  "current": Set {},
                },
                "watchInternal": [Function],
                "watchSubjectRef": Object {
                  "current": Re {
                    "observers": Array [],
                  },
                },
              }
            }
            name="newSchema"
            render={[Function]}
          />
        </div>
      </div>
      <Button
        buttonSize="M"
        buttonType="primary"
        disabled={true}
        type="submit"
      >
        Submit
      </Button>
    </form>
  </styled.div>
</Component>
`;

exports[`Edit Component when schemas are not fetched matches the snapshot 1`] = `
<Component
  clearErrors={[Function]}
  control={
    Object {
      "controllerSubjectRef": Object {
        "current": Re {
          "observers": Array [],
        },
      },
      "defaultValuesRef": Object {
        "current": Object {},
      },
      "fieldArrayDefaultValuesRef": Object {
        "current": Object {},
      },
      "fieldArrayNamesRef": Object {
        "current": Set {},
      },
      "fieldArraySubjectRef": Object {
        "current": Re {
          "observers": Array [],
        },
      },
      "fieldsRef": Object {
        "current": Object {},
      },
      "fieldsWithValidationRef": Object {
        "current": Object {},
      },
      "formStateRef": Object {
        "current": Object {
          "dirtyFields": Object {},
          "errors": Object {},
          "isDirty": false,
          "isSubmitSuccessful": false,
          "isSubmitted": false,
          "isSubmitting": false,
          "isValid": true,
          "isValidating": false,
          "submitCount": 0,
          "touchedFields": Object {},
        },
      },
      "formStateSubjectRef": Object {
        "current": Re {
          "observers": Array [],
        },
      },
      "getIsDirty": [Function],
      "inFieldArrayActionRef": Object {
        "current": false,
      },
      "isWatchAllRef": Object {
        "current": false,
      },
      "readFormStateRef": Object {
        "current": Object {
          "dirtyFields": false,
          "errors": false,
          "isDirty": false,
          "isValid": false,
          "isValidating": false,
          "touchedFields": false,
        },
      },
      "register": [Function],
      "shouldUnmount": undefined,
      "unregister": [Function],
      "validFieldsRef": Object {
        "current": Object {},
      },
      "watchFieldsRef": Object {
        "current": Set {},
      },
      "watchInternal": [Function],
      "watchSubjectRef": Object {
        "current": Re {
          "observers": Array [],
        },
      },
    }
  }
  formState={
    Object {
      "dirtyFields": Object {},
      "errors": Object {},
      "isDirty": false,
      "isSubmitSuccessful": false,
      "isSubmitted": false,
      "isSubmitting": false,
      "isValid": true,
      "isValidating": false,
      "submitCount": 0,
      "touchedFields": Object {},
    }
  }
  getValues={[Function]}
  handleSubmit={[Function]}
  register={[Function]}
  reset={[Function]}
  setError={[Function]}
  setFocus={[Function]}
  setValue={[Function]}
  trigger={[Function]}
  unregister={[Function]}
  watch={[Function]}
>
  <Styled(PageHeading)
    text="Edit schema"
  />
  <PageLoader />
</Component>
`;
