// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Edit Component when schemas are fetched matches the snapshot 1`] = `
<div
  className="section"
>
  <div
    className="level"
  >
    <div
      className="level-item level-left"
    >
      <Breadcrumb
        links={
          Array [
            Object {
              "href": "/ui/clusters/ClusterName/schemas",
              "label": "Schema Registry",
            },
            Object {
              "href": "/ui/clusters/ClusterName/schemas/Subject/latest",
              "label": "Subject",
            },
          ]
        }
      >
        Edit
      </Breadcrumb>
    </div>
  </div>
  <div
    className="box"
  >
    <form
      className="mt-3 is-flex-direction-column"
      onSubmit={[Function]}
    >
      <div
        className="mb-4"
      >
        <h5
          className="title is-5 mb-2"
        >
          Schema Type
        </h5>
        <div
          className="select"
        >
          <select
            defaultValue="AVRO"
            disabled={false}
            name="schemaType"
            onBlur={[Function]}
            onChange={[Function]}
          >
            <option
              key="AVRO"
              value="AVRO"
            >
              AVRO
            </option>
            <option
              key="JSON"
              value="JSON"
            >
              JSON
            </option>
            <option
              key="PROTOBUF"
              value="PROTOBUF"
            >
              PROTOBUF
            </option>
          </select>
        </div>
      </div>
      <div
        className="mb-4"
      >
        <h5
          className="title is-5 mb-2"
        >
          Compatibility Level
        </h5>
        <div
          className="select"
        >
          <select
            defaultValue="BACKWARD"
            disabled={false}
            name="compatibilityLevel"
            onBlur={[Function]}
            onChange={[Function]}
          >
            <option
              key="BACKWARD"
              value="BACKWARD"
            >
              BACKWARD
            </option>
            <option
              key="BACKWARD_TRANSITIVE"
              value="BACKWARD_TRANSITIVE"
            >
              BACKWARD_TRANSITIVE
            </option>
            <option
              key="FORWARD"
              value="FORWARD"
            >
              FORWARD
            </option>
            <option
              key="FORWARD_TRANSITIVE"
              value="FORWARD_TRANSITIVE"
            >
              FORWARD_TRANSITIVE
            </option>
            <option
              key="FULL"
              value="FULL"
            >
              FULL
            </option>
            <option
              key="FULL_TRANSITIVE"
              value="FULL_TRANSITIVE"
            >
              FULL_TRANSITIVE
            </option>
            <option
              key="NONE"
              value="NONE"
            >
              NONE
            </option>
          </select>
        </div>
      </div>
      <div
        className="columns"
      >
        <div
          className="column is-one-half"
        >
          <h4
            className="title is-5 mb-2"
          >
            Latest Schema
          </h4>
          <JSONEditor
            height="500px"
            highlightActiveLine={false}
            isFixedHeight={true}
            name="latestSchema"
            readOnly={true}
            value="{
	\\"schema\\": \\"schema\\"
}"
          />
        </div>
        <div
          className="column is-one-half"
        >
          <h4
            className="title is-5 mb-2"
          >
            New Schema
          </h4>
          <Component
            control={
              Object {
                "controllerSubjectRef": Object {
                  "current": Re {
                    "observers": Array [],
                  },
                },
                "defaultValuesRef": Object {
                  "current": Object {},
                },
                "fieldArrayDefaultValuesRef": Object {
                  "current": Object {},
                },
                "fieldArrayNamesRef": Object {
                  "current": Set {},
                },
                "fieldArraySubjectRef": Object {
                  "current": Re {
                    "observers": Array [],
                  },
                },
                "fieldsRef": Object {
                  "current": Object {
                    "compatibilityLevel": Object {
                      "_f": Object {
                        "mount": true,
                        "name": "compatibilityLevel",
                        "ref": Object {
                          "name": "compatibilityLevel",
                        },
                      },
                    },
                    "schemaType": Object {
                      "_f": Object {
                        "mount": true,
                        "name": "schemaType",
                        "ref": Object {
                          "name": "schemaType",
                        },
                        "required": "Schema Type is required.",
                      },
                    },
                  },
                },
                "fieldsWithValidationRef": Object {
                  "current": Object {
                    "schemaType": true,
                  },
                },
                "formStateRef": Object {
                  "current": Object {
                    "dirtyFields": Object {},
                    "errors": Object {},
                    "isDirty": false,
                    "isSubmitSuccessful": false,
                    "isSubmitted": false,
                    "isSubmitting": false,
                    "isValid": true,
                    "isValidating": false,
                    "submitCount": 0,
                    "touchedFields": Object {},
                  },
                },
                "formStateSubjectRef": Object {
                  "current": Re {
                    "observers": Array [],
                  },
                },
                "getIsDirty": [Function],
                "inFieldArrayActionRef": Object {
                  "current": false,
                },
                "isWatchAllRef": Object {
                  "current": false,
                },
                "readFormStateRef": Object {
                  "current": Object {
                    "dirtyFields": false,
                    "errors": false,
                    "isDirty": "all",
                    "isSubmitting": "all",
                    "isValid": false,
                    "isValidating": false,
                    "touchedFields": false,
                  },
                },
                "register": [Function],
                "shouldUnmount": undefined,
                "unregister": [Function],
                "validFieldsRef": Object {
                  "current": Object {},
                },
                "watchFieldsRef": Object {
                  "current": Set {},
                },
                "watchInternal": [Function],
                "watchSubjectRef": Object {
                  "current": Re {
                    "observers": Array [],
                  },
                },
              }
            }
            name="newSchema"
            render={[Function]}
          />
        </div>
      </div>
      <button
        className="button is-primary"
        disabled={true}
        type="submit"
      >
        Submit
      </button>
    </form>
  </div>
</div>
`;

exports[`Edit Component when schemas are not fetched matches the snapshot 1`] = `
<div
  className="section"
>
  <div
    className="level"
  >
    <div
      className="level-item level-left"
    >
      <Breadcrumb
        links={
          Array [
            Object {
              "href": "/ui/clusters/ClusterName/schemas",
              "label": "Schema Registry",
            },
            Object {
              "href": "/ui/clusters/ClusterName/schemas/Subject/latest",
              "label": "Subject",
            },
          ]
        }
      >
        Edit
      </Breadcrumb>
    </div>
  </div>
  <PageLoader />
</div>
`;
